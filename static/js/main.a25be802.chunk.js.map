{"version":3,"sources":["HOC/with-data-hoc/with-data.component.jsx","components/user-list/user-list.component.jsx","components/user-profile/user-profile.component.jsx","components/posts/posts.component.jsx","App.js","serviceWorker.js","index.js"],"names":["WithData","WrappedComponent","props","state","data","setTimeout","fetch","dataSource","then","response","json","setState","slice","this","otherProps","length","className","React","Component","map","user","key","id","name","email","post","title","body","Posts","posts","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0QA8BeA,EA5BE,SAACC,GAyBd,OAzBmC,YAG/B,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,KAAK,IAJM,EAHY,iFAWV,IAAD,OAChBC,YAAW,WACPC,MAAM,EAAKJ,MAAMK,YAChBC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAJ,GAAI,OAAI,EAAKO,SAAS,CAACP,KAAMA,EAAKQ,MAAM,EAAG,WACnD,QAhBwB,+BAmBrB,IAAD,EACgCC,KAAKX,MAAnBY,GADlB,EACGP,WADH,+BAEL,OAAOM,KAAKV,MAAMC,KAAKW,OAAS,EAAK,wBAAIC,UAAU,aAAd,cAA8C,kBAACf,EAAD,eAAkBG,KAAMS,KAAKV,MAAMC,MAAUU,QArBrG,GAEHG,IAAMC,YCW3BlB,KAZE,SAAC,GAAD,IAAEI,EAAF,EAAEA,KAAF,OACb,yBAAKY,UAAU,uBACX,4CACCZ,EAAKe,KAAI,SAAAC,GAAI,OACV,yBAAKJ,UAAU,OAAOK,IAAKD,EAAKE,IAC5B,gCAAMF,EAAKG,KAAX,KACA,gCAAMH,EAAKI,MAAX,aCSDxB,KAfK,SAAC,GAAD,IAAGI,EAAH,EAAGA,KAAMmB,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,OAClB,yBAAKR,UAAU,aACb,wBAAIA,UAAU,QAAQO,GACtB,4BAAKC,GACL,6BACA,qCACCpB,EAAKe,KAAI,SAAAM,GAAI,OACZ,yBAAKT,UAAU,OAAOK,IAAKI,EAAKH,IAC9B,4BAAKG,EAAKC,OACV,+BAAKD,EAAKE,KAAV,aCsBOC,EAhCf,YACI,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACT0B,MAAM,IAJK,EADvB,iFASyB,IAAD,OAChBvB,MAAM,8CACLE,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAJ,GAAI,OAAI,EAAKO,SAAS,CAACkB,MAAOzB,EAAKQ,MAAM,EAAG,WAZ3D,+BAgBQ,OACI,yBAAKI,UAAU,aACf,iDAEIH,KAAKV,MAAM0B,MAAMV,KAAK,SAAAM,GAAI,OACtB,yBAAKT,UAAU,OAAOK,IAAKI,EAAKH,IAC5B,4BAAKG,EAAKC,OACV,2BAAID,EAAKE,eAvBjC,GAA2BT,aCeZY,MAVf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUT,WAAW,+CACrB,kBAAC,EAAD,CAAagB,KAAK,YAAYC,MAAM,qBAAqBjB,WAAW,iDCAtDwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a25be802.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WithData = (WrappedComponent) => {\r\n\r\n    class EnhancedComponent extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n    \r\n            this.state = {\r\n                data:[]\r\n            };\r\n        }\r\n    \r\n        componentDidMount() {\r\n            setTimeout(() => {\r\n                fetch(this.props.dataSource)\r\n                .then( response => response.json())\r\n                .then( data => this.setState({data: data.slice(0, 10)}));\r\n            }, 1500 );            \r\n        }\r\n\r\n        render() {\r\n            const { dataSource, ...otherProps} = this.props;\r\n            return this.state.data.length < 1 ? (<h1 className=\"container\">Loading...</h1>) : (<WrappedComponent data={this.state.data} {...otherProps} />) \r\n        }\r\n    }\r\n\r\n    return EnhancedComponent;\r\n}\r\n\r\nexport default WithData;\r\n","import React from 'react';\r\nimport WithData from '../../HOC/with-data-hoc/with-data.component';\r\n\r\nconst UserList = ({data}) => (\r\n    <div className='container user-list'>\r\n        <h1> Users List </h1>\r\n        {data.map(user => (\r\n            <div className='post' key={user.id}>\r\n                <h1> {user.name} </h1>\r\n                <h2> {user.email} </h2>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default WithData(UserList);\r\n","import React from 'react';\r\nimport WithData from '../../HOC/with-data-hoc/with-data.component';\r\n\r\nconst UserProfile = ({ data, name, email }) => (\r\n  <div className='container'>\r\n    <h1 className=\"mb-0\">{name}</h1>\r\n    <h2>{email}</h2>\r\n    <hr/>\r\n    <h1>Posts</h1>\r\n    {data.map(post => (\r\n      <div className='post' key={post.id}>\r\n        <h2>{post.title}</h2>\r\n        <p> {post.body} </p>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default WithData(UserProfile);\r\n","import React, { Component } from 'react';\r\n\r\nexport class Posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            posts:[]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then( response => response.json())\r\n        .then( data => this.setState({posts: data.slice(0, 10)}));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <h1>Posts without HOC</h1>\r\n            {\r\n                this.state.posts.map( post => (\r\n                    <div className='post' key={post.id}>\r\n                        <h2>{post.title}</h2>\r\n                        <p>{post.body}</p>\r\n                    </div>\r\n                ))\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Posts;\r\n","import React from 'react';\nimport './App.css';\n\nimport UserList from './components/user-list/user-list.component';\nimport UserProfile from './components/user-profile/user-profile.component';\nimport Posts from './components/posts/posts.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Posts/>\n      <UserList dataSource='https://jsonplaceholder.typicode.com/users'/>\n      <UserProfile name='John Elia' email='johnelia@gmail.com' dataSource='https://jsonplaceholder.typicode.com/posts'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}